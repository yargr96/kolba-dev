class Calculator {
    constructor({range, socials, flask, countContainer}) {
        this._range = range;
        this._socials = socials;
        this._flask = flask;
        this._countContainer = countContainer;

        this._onChange = this._onChange.bind(this);
        range.onChange = this._onChange;
        socials.onChange = this._onChange;

        this._setMaxPrice();
        this._render();
    }

    _onChange() {
        this._render();
    }

    _render() {
        this._countContainer.textContent = this.priceFormatted;
        this._flask.fullness = this._priceFullness;
    }

    _setMaxPrice() {
        const postsCount = this._range.max;
        const socialsCount = this._socials.totalCount;

        this._maxPrice = (socialsCount - (socialsCount - 1) / 2) * (postsCount * 400) + postsCount * 400;
    }

    get price() {
        const postsCount = this._range.value;
        const {count: socialsCount, designDecoration} = this._socials.value;

        if (!socialsCount) return 0;
        
        let designPrice = 0;
        if (designDecoration) designPrice = postsCount * 400;

        return (socialsCount - (socialsCount - 1) / 2) * (postsCount * 400) + designPrice;
    }

    get priceFormatted() {
        let i = 0;

        return String(this.price).split('').reduceRight((acc, char) => {
            i++;
            
            if (i % 3 === 0) return char + " " + acc;
            return char + acc;
        })
    }

    get _priceFullness() {
        return this.price / this._maxPrice;
    }
}
class Flask {
    constructor({flask, fullness = 0}) {
        this._flask = flask;
        this._fullness = fullness;
        this._filler = this._flask.querySelector('.flask__full');

        this._MAX_FILLER_HEIGHT = 80;
        this._MIN_FILLER_HEIGHT = 2;

        this._fillerHeightRange = this._MAX_FILLER_HEIGHT - this._MIN_FILLER_HEIGHT;

        this._setFillerHeight();
    }

    _setFillerHeight() {
        const height = this._fillerHeightRange * this._fullness + this._MIN_FILLER_HEIGHT;
        this._filler.style.height = height + '%';
    }

    set fullness(value) {
        this._fullness = value;
        this._setFillerHeight();
    }
}
class Range {
    constructor({rangeNode, min, max, step, value, onChange}) {
        this._rangeNode = rangeNode;
        this.min = min;
        this.max = max;
        this._step = step;

        if (onChange) this.onChange = onChange;

        this._filled = this._rangeNode.querySelector('.range__filled');
        this._thumb = this._rangeNode.querySelector('.range__thumb');
        this._count = this._rangeNode.querySelector('.range__count');

        this._onMouseDown = this._onMouseDown.bind(this);
        this._onMouseMove = this._onMouseMove.bind(this);
        this._onMouseUp = this._onMouseUp.bind(this);

        this._thumb.addEventListener('mousedown', this._onMouseDown);
        this._thumb.addEventListener('touchstart', this._onMouseDown);

        window.addEventListener('mouseup', this._onMouseUp);
        window.addEventListener('touchend', this._onMouseUp);

        this._stepsCount = (this.max - this.min) / this._step;

        this.value = value === undefined ? this.min : value;

        this._setRangeCoordinates = this._setRangeCoordinates.bind(this);
        this._setRangeCoordinates();
        window.addEventListener('resize', this._setRangeCoordinates);

        this._setThumbPosition();
    }

    _setRangeCoordinates() {
        const rangeRect = this._rangeNode.getBoundingClientRect();
        const {left, right} = rangeRect;
        const rangeLength = right - left;

        this._leftRangeCoordinate = left;
        this._stepLength = rangeLength / this._stepsCount;
    }

    _onMouseDown(e) {
        if (!e.target.classList.contains('range__thumb')) return;
        
        window.addEventListener('mousemove', this._onMouseMove);
        window.addEventListener('touchmove', this._onMouseMove);
    }

    _onMouseMove(e) {
        const mouseX = e.pageX || e.changedTouches[0].pageX;        
        const mouseOffset = mouseX - this._leftRangeCoordinate;

        let value = Math.round(mouseOffset / this._stepLength) * this._step + this.min;

        if (value < this.min) value = this.min;
        if (value > this.max) value = this.max;
        
        this.value = value;
    }

    _onMouseUp() {
        window.removeEventListener('mousemove', this._onMouseMove);
    }

    _setThumbPosition() {
        const offset = (this._value - this.min) * this._stepLength / this._step;

        this._filled.style.width = offset + 'px';
        this._thumb.style.left = offset + 'px';
    }

    get value() {
        return this._value;
    }

    set value(val) {
        this._value = val;

        this._setThumbPosition();
        this._count.textContent = val;

        this.onChange && this.onChange(val);
    }
}
class Socials {
    constructor({socialsList, designCheckbox, onChange}) {
        this._socialsList = socialsList;
        this._designCheckbox = designCheckbox;

        if (onChange) this.onChange = onChange;

        this._onSocialsChange = this._onSocialsChange.bind(this);
        this._onDesignDecorationChange = this._onDesignDecorationChange.bind(this);

        this._socialsList.forEach(checkbox => {
            checkbox.addEventListener('change', this._onSocialsChange);
        })

        this._designCheckbox.addEventListener('change', this._onDesignDecorationChange);

        this._checkSocials();
        this._checkDesignDecoration();
    }

    _checkSocials() {
        let count = 0;

        this._socialsList.forEach(checkbox => {
            if (checkbox.checked) count++;
        });

        this._socialsCount = count;
    }

    _checkDesignDecoration() {
        this._designDecoration = this._designCheckbox.checked;
    }

    _onSocialsChange() {
        this._checkSocials();
        this.onChange && this.onChange(this.value);
    }

    _onDesignDecorationChange() {
        this._checkDesignDecoration();
        this.onChange && this.onChange(this.value);
    }

    get value() {
        return {
            count: this._socialsCount,
            designDecoration: this._designDecoration
        }
    }

    get totalCount() {
        return this._socialsList.length;
    }
}
document.addEventListener('DOMContentLoaded', () => {
    const range = new Range({
        rangeNode: document.querySelector('.range'),
        min: 13,
        max: 69,
        step: 4,
        // value: 25
    });

    const socials = new Socials({
        socialsList: document.querySelectorAll('.checkbox__input_social'),
        designCheckbox: document.querySelector('.checkbox__input_design')
    });

    const flask = new Flask({
        flask: document.querySelector('.flask')
    })

    window.calculator = new Calculator({
        range,
        socials,
        flask,
        countContainer: document.querySelector('.calculator-section__total-count')
    });
})